import argparse
import os
import bitarray

from engine import huffman, key_routine, encryption


"""
    Simple block cipher algorithm designed by me, following the principles of "confusion" and "diffusion"
    The file is first compressed using huffman coding, and then encrypted by xor-ing it to the keystream.
    The keystream is obtained by repeating the 32 bytes generated by hashing the password.
"""


def parsecli():
    parser = argparse.ArgumentParser(description="Encrypt and Decrypt a file using a symmetric cipher invented by "
                                                 "yours truly.")

    parser.add_argument('input', help='plaintext to encrypt / ciphertext to decrypt', type=str)
    parser.add_argument('output', help='generated cipher / message', type=str)
    parser.add_argument('-d', '--decrypt', help='decrypt (default is to encrypt)', action='store_true')
    parser.add_argument('--just-compress', help='(debug purposes) run the compression pass, but skip the'
                                                ' encryption pass', action='store_true')

    return parser.parse_args()


def encrypt(cli):
    input_filesize = os.stat(cli.input).st_size
    with open(cli.input, "rb") as loadfile:
        bitblob = huffman.compress(loadfile, 0, input_filesize)
        if cli.just_compress:
            with open(cli.output, "wb") as savefile:
                bitblob.tofile(savefile)
        else:
            key = key_routine.get_key()
            bytelist = bytearray(bitblob.tobytes())
            encryption.encrypt_decrypt(bytelist, key)
            with open(cli.output, "wb") as savefile:
                savefile.write(bytelist)


def decrypt(cli):
    with open(cli.input, "rb") as loadfile:
        bytelist = bytearray(loadfile.read())
        if not cli.just_compress:
            key = key_routine.get_key()
            encryption.encrypt_decrypt(bytelist, key)

        bitstream = bitarray.bitarray(endian="big")
        bitstream.frombytes(bytes(bytelist))
        with open(cli.output, "wb") as savefile:
            huffman.uncompress(bitstream, savefile)


if __name__ == "__main__":
    cli = parsecli()
    if cli.decrypt:
        decrypt(cli)
    else:
        encrypt(cli)
